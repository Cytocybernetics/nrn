#
# This makefile has the rules necessary for making the custom version of coreneuron
# executable called "special-core" from various mod files.
# Mod files are looked up in the cwd, unless MODS_PATH is set

# Mechanisms version are by default 0.0, but should be overriden
MECH_NAME =
MECH_VERSION = 0.0
MODS_PATH = .
OUTPUT = @CMAKE_HOST_SYSTEM_PROCESSOR@
OPTMODS = @CORENRN_OPTMODS@

bindir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_BINDIR@
libdir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@
incdir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@
datadir= @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/coreneuron
datadir_mod2c = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@/mod2c

# Additional variables set in CMAKE usable here
# - @CORENRN_COMPILE_DEFS@
# - @CORENRN_LINK_DEFS@

LDFLAGS = $(LINKFLAGS) @CORENRN_LINK_DEFS@
CORENRNLIB_FLAGS = -L$(libdir) -lcoreneuron

# We rebuild the include dirs since a lot of stuff changes place
INCLUDES = $(INCFLAGS) -I$(incdir) -I$(incdir)/coreneuron/utils/randoms
ifneq (@CORENRN_MPI_INCLUDES@,)
    INCLUDES += -I@CORENRN_MPI_INCLUDES@
endif
ifneq (@reportinglib_INCLUDE_DIR@,)
    INCLUDES += -I@reportinglib_INCLUDE_DIR@
endif


CC = @CMAKE_C_COMPILER@
CXX = @CMAKE_CXX_COMPILER@
CFLAGS = @BUILD_TYPE_C_FLAGS@ @CMAKE_C_FLAGS@
CXXFLAGS = @BUILD_TYPE_CXX_FLAGS@ @CMAKE_CXX_FLAGS@ @CXX11_STANDARD_COMPILE_OPTION@

COMPILE = $(CC) $(CFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXXCOMPILE = $(CXX) $(CXXFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXX_LINK_EXE = $(CXX) $(CXXFLAGS) @CMAKE_EXE_LINKER_FLAGS@
CXX_LINK_SHARED = $(CXX) $(CXXFLAGS) @CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS@ @CMAKE_SHARED_LIBRARY_CXX_FLAGS@ @CMAKE_SHARED_LINKER_FLAGS@


MODC_DIR = $(OUTPUT)/modc_core
OBJS_DIR = $(OUTPUT)/build_core
mod_files = $(sort $(notdir $(wildcard $(MODS_PATH)/*.mod)))
mod_names = $(mod_files:.mod=)
modc_files = $(addprefix $(MODC_DIR)/,$(addsuffix .cpp,$(mod_names)))
mod_objs   = $(addprefix $(OBJS_DIR)/,$(addsuffix .o,$(mod_names)))

kinderiv_h = $(MODC_DIR)/_kinderiv.h
mod_func_o = $(OBJS_DIR)/_mod_func.o
mod_func_c = $(MODC_DIR)/_mod_func.cpp
dimplic_src= $(datadir)/scopmath_core/dimplic.cpp
dimplic_c  = $(MODC_DIR)/_dimplic.cpp
dimplic_o  = $(OBJS_DIR)/_dimplic.o

special  = $(OUTPUT)/special-core
LIB_SUFFIX_ = $(if $(MECH_NAME),_$(MECH_NAME),)
coremech_libname = corenrnmech$(LIB_SUFFIX_)-$(MECH_VERSION)
coremech_lib = $(OUTPUT)/lib$(coremech_libname)@CMAKE_SHARED_LIBRARY_SUFFIX@


# ======== MAIN BUILD RULES ============

# Take the main and link with nrnmech.
# RPATH is set for ORIGIN and coreneuron lib
$(special): $(coremech_lib)
	$(CXX_LINK_EXE) $(libdir)/libcoreneuron_main.a -o $(special) -L $(OUTPUT) -l$(coremech_libname) \
	  $(CORENRNLIB_FLAGS) -Wl,-rpath,'$$ORIGIN' -Wl,-rpath,$(libdir) $(LDFLAGS)


$(coremech_lib): $(mod_func_o) $(dimplic_o) $(mod_objs)
	@echo "#BUILDING lib $(coremech_lib) from Mod files $(mod_files)"
	$(CXX_LINK_SHARED) -o ${coremech_lib} \
	  $(mod_func_o) $(dimplic_o) $(mod_objs) $(CORENRNLIB_FLAGS) $(LDFLAGS)


# Generic build cpp->o. Need PIC for shared lib
$(OBJS_DIR)/%.o: $(MODC_DIR)/%.cpp $(kinderiv_h)
	$(CXXCOMPILE) @CMAKE_CXX_COMPILE_OPTIONS_PIC@ -c $< -o $@


$(MODC_DIR)/%.cpp: $(MODS_PATH)/%.mod | $(OUTPUT)
	MODLUNIT=$(datadir_mod2c)/nrnunits.lib \
	  $(bindir)/mod2c_core $< -o $(MODC_DIR)/


# Mod registration. Compiled by generic rule. Dont overwrite if not changed
$(mod_func_c): build_always | $(OUTPUT)
	perl $(datadir)/mod_func.c.pl $(OPTMODS) $(mod_files) > $(mod_func_c).tmp
	diff -q $(mod_func_c).tmp $(mod_func_c) || echo "Replacing mod_func.c" && mv $(mod_func_c).tmp $(mod_func_c)


# Header to avoid function callbacks using function pointers
# Move all mods to temp and bring back only those required
$(kinderiv_h): $(modc_files) build_always | $(OUTPUT)
	cd $(MODC_DIR) && mkdir -p _tmp &&	mv [^_]*.cpp _tmp/ && \
	  mv $(addprefix _tmp/,$(notdir $(modc_files))) ./ || true
	rm -rf $(MODC_DIR)/_tmp
	cd $(MODC_DIR) && python $(datadir)/kinderiv.py


$(dimplic_c): $(dimplic_src) | $(OUTPUT)
	cp $(dimplic_src) $(dimplic_c)


# == INIT ==
$(OUTPUT):
	mkdir -p $(OUTPUT)
	mkdir -p $(MODC_DIR)
	mkdir -p $(OBJS_DIR)

.PHONY: build_always
